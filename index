<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mobile Gravity Simulation</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
            background-color: #111;
        }
        canvas {
            display: block;
        }
    </style>
</head>
<body>

<canvas id="simulation"></canvas>

<script>
    // Basic setup
    const canvas = document.getElementById('simulation');
    const ctx = canvas.getContext('2d');
    let particles = [];
    const GRAVITY = 0.1;
    const FRICTION = 0.99;
    const PARTICLE_RADIUS = 5;
    const MAX_PARTICLES = 500;

    // Resizing canvas to fit the screen
    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    // Particle class definition
    class Particle {
        constructor(x, y, vx, vy, color) {
            this.x = x;
            this.y = y;
            this.vx = vx;
            this.vy = vy;
            this.color = color;
            this.life = Math.random() * 100 + 100;  // Random lifetime for each particle
        }

        update() {
            // Apply gravity
            this.vy += GRAVITY;

            // Apply friction (slows down over time)
            this.vx *= FRICTION;
            this.vy *= FRICTION;

            // Update position
            this.x += this.vx;
            this.y += this.vy;

            // Particle lifespan
            this.life -= 1;
        }

        draw() {
            ctx.beginPath();
            ctx.arc(this.x, this.y, PARTICLE_RADIUS, 0, Math.PI * 2);
            ctx.fillStyle = this.color;
            ctx.fill();
            ctx.closePath();
        }
    }

    // Create new particles at a specified position
    function createParticles(x, y) {
        const numParticles = 5;
        const colors = ['#ffcc00', '#ff6600', '#ff3300', '#ff0000'];
        for (let i = 0; i < numParticles; i++) {
            const angle = Math.random() * Math.PI * 2;
            const speed = Math.random() * 3 + 1;
            const vx = Math.cos(angle) * speed;
            const vy = Math.sin(angle) * speed;
            const color = colors[Math.floor(Math.random() * colors.length)];
            particles.push(new Particle(x, y, vx, vy, color));
        }
    }

    // Main game loop
    function update() {
        // Clear the screen
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Update and draw all particles
        for (let i = particles.length - 1; i >= 0; i--) {
            const p = particles[i];
            p.update();
            p.draw();

            // Remove dead particles
            if (p.life <= 0) {
                particles.splice(i, 1);
            }
        }

        // Limit the number of particles for better performance
        if (particles.length > MAX_PARTICLES) {
            particles.splice(0, particles.length - MAX_PARTICLES);
        }

        // Request the next frame
        requestAnimationFrame(update);
    }

    // Event listener for touch events (on mobile)
    canvas.addEventListener('touchstart', (event) => {
        event.preventDefault();
        const touch = event.touches[0];
        createParticles(touch.clientX, touch.clientY);
    });

    canvas.addEventListener('touchmove', (event) => {
        event.preventDefault();
        const touch = event.touches[0];
        createParticles(touch.clientX, touch.clientY);
    });

    // Initializing the simulation
    update();

</script>

</body>
</html>
